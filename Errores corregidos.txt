Errores encontrados y soluciones aplicadas en la sesión:

1. Error: Al presionar el botón "Movimientos" en la barra inferior, los filtros de cliente y tipo no se limpiaban correctamente o no se reflejaban en la UI.
   - Solución: Se modificó el método _onTab en MainScaffold para que use filterProvider.setClientId(null) y filterProvider.setType(null), que es el valor correcto para mostrar "Todos" en los dropdowns.

2. Error: Al limpiar los filtros desde la barra inferior, la pantalla de movimientos no actualizaba visualmente los dropdowns.
   - Solución: Se refactorizó TransactionsScreen para que los dropdowns de cliente y tipo usen SIEMPRE el valor del provider global (TransactionFilterProvider) y no variables locales. Así, cualquier cambio en el filtro se refleja automáticamente en la UI.

3. Error: Al aplicar la refactorización, quedaron referencias a variables locales (_selectedClientId, _selectedType) que ya no existían, causando errores de compilación.
   - Solución: Se eliminaron todas las referencias a esas variables y se ajustó la lógica para depender únicamente del provider.

4. Error: Al eliminar una transacción con swipe (Dismissible), Flutter mostraba el error "A dismissed Dismissible widget is still part of the tree" y la transacción no desaparecía de la UI inmediatamente.
   - Solución: Se corrigió el handler de onDismissed para eliminar la transacción de la lista visible en la UI usando setState en el mismo momento del swipe, cumpliendo el patrón recomendado por Flutter. El estado "pendiente por eliminar" ahora se muestra como feedback visual (snackbar/banner), y la sincronización/eliminación real ocurre en segundo plano con delay. Así se evita el error y la experiencia es fluida.

5. Error: Al compartir o guardar un recibo PDF de un solo cliente, el archivo se generaba con el nombre genérico "Recibo General de Clientes.pdf" en vez de personalizarse con el nombre del cliente.
   - Solución: Se ajustó la lógica de generación y guardado del PDF para que, si es un solo cliente, el archivo se llame "Recibo de Cliente (Nombre_del_cliente).pdf" (sanitizando el nombre para evitar caracteres inválidos). Si son varios clientes, se mantiene el nombre "Recibo General de Clientes.pdf".


6. Error: El botón "Ver movimientos" en el modal de detalles del cliente no cambiaba correctamente la pestaña ni aplicaba el filtro de cliente, ya que solo actualizaba el provider y no el estado local de la UI.
   - Solución: Se centralizó la lógica de cambio de pestaña y filtrado en MainScaffold, exponiendo un método público que puede ser llamado desde el modal o desde cualquier parte de la app. Ahora, al pulsar "Ver movimientos", se actualiza tanto el provider como el estado local, garantizando que la UI y los filtros estén sincronizados.

Resultado: Ahora los filtros de la pantalla de movimientos están 100% sincronizados con el provider global y cualquier cambio (desde la barra inferior, modal, etc.) se refleja correctamente en la UI. Además, el swipe para eliminar transacciones funciona sin errores visuales, la transacción desaparece de inmediato y la sincronización en background se mantiene. Por último, el nombre del archivo PDF es claro y personalizado según el caso, facilitando la identificación y el envío correcto del recibo.


7. Mejora: El buscador de transacciones ahora se limpia correctamente tanto la variable interna como el texto visible del campo de búsqueda al cambiar de pantalla, recargar la pestaña de movimientos o presionar el botón "Movimientos" en la barra inferior.
   - Solución: Se implementó el método resetSearchState en TransactionsScreen, que limpia tanto la variable interna como el texto del TextField usando un TextEditingController. Este método se llama desde MainScaffold usando un GlobalKey, asegurando que el buscador se limpie visual y lógicamente en todos los flujos relevantes.
   - Resultado: El usuario siempre ve el campo de búsqueda vacío y sin foco al cambiar de pestaña o recargar movimientos, evitando confusiones y mejorando la experiencia de usuario.


8. Error: El login con Google en Android se cancelaba tras seleccionar la cuenta, mostrando el mensaje "Inicio de sesión cancelado por el usuario" incluso con internet activo. El flujo no llegaba a obtener el idToken ni a autenticar con Supabase.
   - Solución y pasos para resolverlo:
     1. Se verificó que el Client ID de tipo Web estuviera correctamente configurado en Supabase y en el código Dart.
     2. Se revisó que la URI de redirección fuera exactamente la de Supabase en Google Cloud Console y en Supabase.
     3. Se confirmó que la pantalla de consentimiento OAuth estuviera publicada y sin restricciones de usuario.
     4. Se habilitaron las APIs necesarias en Google Cloud Console: People API e Identity Toolkit API.
     5. Se generó el SHA-1 de depuración y de release de la app Android.
     6. Se creó un Client ID de tipo Android en Google Cloud Console, asociando el nombre de paquete y el SHA-1 de la app.
     7. Se dejó el Client ID de tipo Web en Supabase y en el código, y el Client ID de tipo Android solo en Google Cloud Console.
     8. Se probó el login nuevamente y el flujo funcionó correctamente: se obtuvo el idToken, se autenticó con Supabase y se navegó al dashboard.
   - Resultado: El login con Google en Android funciona correctamente, el flujo OAuth es válido y la experiencia de usuario es fluida.

9. Mejora: Navegación y animación centralizada en dashboard y login.
   - Solución: Se centralizó la animación de escala en los botones y statcards usando el widget ScaleOnTap, mejorando la experiencia visual en login y dashboard. Se corrigió la navegación entre tabs para que los statcards del dashboard cambien correctamente la pestaña usando una función local en MainScaffold, evitando dependencias globales y asegurando sincronización total entre UI y provider.
   - Resultado: La navegación entre tabs desde los statcards es instantánea y consistente, la animación de botones es fluida y la estructura del código es más mantenible. Se eliminaron imports no usados y se verificó que no haya errores de compilación.

10. Mejora: Animación de escala visible antes de navegar entre pantallas.
   - Solución: Se modificó el widget ScaleOnTap para que aplique un pequeño delay antes de ejecutar la acción de tap, permitiendo que la animación de escala se vea completa antes de cambiar de pantalla o tab. Esto mejora la experiencia visual en los statcards y botones animados.
   - Resultado: El usuario percibe claramente la animación de escala en los botones/statcards antes de la navegación, logrando una interacción más fluida y profesional en toda la app.

11. Mejora: Padding inferior y superior ajustable en la lista de transacciones (ListView) para evitar que los últimos elementos queden tapados por los botones inferiores.
   - Problema: El último elemento de la lista de transacciones quedaba parcialmente oculto al hacer scroll, especialmente en móviles con barra/botones inferiores, y no era posible ajustar el espacio fácilmente desde el código.
   - Solución: Se agregó un ajuste manual de padding en el ListView de transacciones:
     // --- Ajuste manual de padding para ListView ---
     // Permite al usuario ajustar el espacio superior/inferior del ListView
     double listViewTopPadding = 10.0; // Ajusta este valor manualmente
     double listViewBottomPadding = 60.0; // Ajusta este valor manualmente para que el último item sea visible
   - Resultado: Ahora el espacio inferior de la lista se puede ajustar fácilmente, asegurando que el último card de transacción siempre quede visible y no sea tapado por los botones inferiores. El usuario puede modificar estos valores según la necesidad visual de la app.
12. Error: Al crear una transacción global o inicial para un cliente, la app mostraba el error "NoSuchMethodError: Class 'TransactionHive' has no instance getter 'localId'" o "NoSuchMethodError: Class 'TransactionHive' has no instance getter 'createdAt'".
   - Problema: El modelo TransactionHive no tenía los campos localId ni createdAt, pero el código intentaba acceder a ellos al convertir entre modelos, causando errores y bloqueando la creación/sincronización de transacciones.
   - Solución: Se agregó el campo localId al modelo TransactionHive y se corrigió el método Transaction.fromHive para usar solo el campo date como createdAt. Ahora la conversión entre modelos es segura y no genera errores.
   - Resultado: Ya se pueden crear transacciones iniciales y globales para clientes sin errores, y la sincronización con Hive y Supabase funciona correctamente. El flujo de creación y visualización de movimientos es estable y sin bugs relacionados a los modelos.

13. Error/Mejora: El campo anchorUsdValue no se calculaba ni enviaba correctamente al crear transacciones desde el TransactionForm (modal de cliente), resultando en valores null en Supabase y en la app.
   - Problema: El cálculo de anchorUsdValue fallaba porque el acceso al CurrencyProvider usaba Provider.of<dynamic>, lo cual no es soportado y lanzaba una excepción. Esto hacía que anchorUsdValue quedara null en todas las monedas excepto USD, y el debug mostraba un error de assertion.
   - Solución: Se corrigió el acceso usando Provider.of<CurrencyProvider>(context, listen: false), con fallback robusto si el provider no está en el árbol. Ahora anchorUsdValue se calcula y envía correctamente en todos los flujos, igual que en el modal global, y los debugPrints muestran el valor y la tasa usada.
   - Resultado: El valor anchorUsdValue ya nunca es null (salvo que realmente no haya provider ni tasa), la sincronización con Supabase y Hive es correcta, y el flujo de creación de transacciones es robusto y trazable desde todos los formularios.

14. Mejora/Error: Lógica de visualización de mensajes de sincronización y eliminación en la UI de clientes (ClientCard/ExpandableClientCard).
   - Problema: El flujo de mensajes temporales y persistentes ("Sincronizando", "Pendiente por sincronizar", "Sincronizado", "Pendiente de eliminar") no era consistente ni claro para el usuario, especialmente al trabajar offline o tras eliminar un cliente. Además, había debugPrint innecesarios y la lógica estaba dispersa entre provider y UI.
   - Solución: Se depuró y centralizó la lógica en ClientsScreen para que:
     - Al guardar un cliente, se muestre "Sincronizando" (azul) como estado temporal.
     - Si no hay internet tras intentar sincronizar, el mensaje cambia a "Pendiente por sincronizar" (naranja) y se mantiene hasta que vuelva la conexión.
     - Cuando vuelve el internet, se muestra nuevamente "Sincronizando" mientras se intenta sincronizar.
     - Cuando se sincroniza exitosamente, se muestra "Sincronizado" (verde) por unos segundos y luego se oculta el mensaje.
     - Al eliminar un cliente, se muestra "Pendiente de eliminar" (rojo) incluso en modo offline.
     - Se eliminaron debugPrint innecesarios y se forzó el rebuild de la card para mostrar el estado correcto.
   - Resultado: El usuario percibe claramente el estado de sincronización y eliminación de cada cliente, tanto online como offline, y la UI es consistente y profesional. El flujo cumple con el UX solicitado y la lógica es más mantenible.
Fecha: 2025-07-29

15. Error: Corrección de Conversión de Moneda en Múltiples Pantallas.
   - Problema: Varios componentes de la UI (recibos, stats del dashboard, lista de movimientos recientes, totales de transacciones) no aplicaban la conversión de moneda correctamente. Solo cambiaban el símbolo (ej. de VES a COP), pero el monto seguía calculándose con una tasa incorrecta, generando confusión.
   - Solución: Se estandarizó el acceso a la tasa de cambio. Se añadió el método `getRateFor(String currencyCode)` al `CurrencyProvider` para obtener la tasa específica de la moneda seleccionada. Se refactorizaron todos los widgets afectados (`general_receipt_modal`, `dashboard_stats`, `dashboard_screen`, `transactions_screen`) para que usen este método, asegurando que la conversión siempre sea la correcta.
   - Resultado: La conversión de moneda ahora funciona de manera consistente y precisa en toda la aplicación. Los montos en la moneda secundaria seleccionada se calculan y muestran correctamente, eliminando la inconsistencia y mejorando la confianza del usuario en los datos.

16. Mejora: Rediseño y Optimización de Recibos PDF.
   - Problema: Los recibos en PDF tenían un formato simple que no era claro con múltiples monedas. La tabla de transacciones y los totales no separaban los montos en USD de la moneda secundaria, y el diseño general era poco flexible para montos largos. Además, existían errores de formato numérico y de renderizado de iconos.
   - Solución: Se realizó una reestructuración completa de la generación de PDFs (`pdf_utils.dart`):
     - La tabla de transacciones ahora tiene columnas separadas: "Monto USD" y "Monto [Moneda Secundaria]".
     - Los montos en la tabla están alineados a la derecha y no incluyen el símbolo de moneda para ahorrar espacio.
     - Los totales (por cliente y generales) se muestran en un formato de dos columnas ("Total Deuda" y "Total Abono"), alineados a la derecha, con los montos en USD y en la moneda secundaria en líneas separadas para mayor claridad.
     - Se corrigió la etiqueta "Correo" por "Dirección" en los datos del cliente.
     - Se estandarizó el formato de números a `1.234,56` (punto para miles, coma para decimales).
     - Se eliminaron los iconos emoji del pie de página para evitar errores de renderizado de fuentes.
   - Resultado: Los recibos en PDF ahora son mucho más profesionales, claros y consistentes con la UI de la aplicación. La información es fácil de leer, incluso con números grandes, y la presentación de múltiples monedas es explícita y correcta.

Fecha: 2025-08-08

17. Error: Aparente cierre de sesión (navegación a Welcome) al guardar una transacción desde TransactionForm tras un cold start.
    - Causa: No era un signOut real, sino un doble pop en la navegación. TransactionForm ya cerraba el modal vía onClose (Navigator.pop), y además el caller ejecutaba otro Navigator.pop(), cerrando la ruta inferior y enviando a '/'. Tras el siguiente arranque, la sesión se restauraba y llevaba a Dashboard.
    - Solución: Se eliminó el pop duplicado y se delegó el cierre únicamente a onClose del TransactionForm.
       • Archivos: ClientsScreen (handleTransactionSave) y ClientDetailsModal (callback de onSave del TransactionForm).
    - Resultado: Al guardar, solo se cierra el modal/hoja y se permanece en Dashboard mostrando el snackbar “Transacción guardada correctamente”, sin saltos a Welcome.
    - Fecha: 2025-09-10

9. Error: Al mostrar montos de transacciones en monedas distintas de USD (ej. VES, COP), el valor visual era incorrecto (mostraba el monto convertido desde USD en vez del monto original registrado).
   - Solución: Se corrigió la lógica en transaction_card.dart y transactions_screen.dart para que, si la moneda seleccionada no es USD, se muestre siempre el campo amount (monto original en la moneda local) y debajo el monto en USD solo como referencia. Así, el valor visual coincide con el registrado y no hay confusión.

10. Error: El campo de monto en el modal de agregar transacción no formateaba correctamente los miles y decimales en tiempo real, permitiendo más de dos decimales y no agregando ",00" al perder el foco.
   - Solución: Se implementó un TextInputFormatter personalizado (ThousandsFormatter) y lógica con FocusNode para formatear el monto en tiempo real, restringir a dos decimales y agregar ",00" automáticamente si el usuario no lo escribe. El valor se guarda y muestra siempre con el formato correcto.

11. Error: Al eliminar transacciones y navegar rápidamente, la pantalla de movimientos mostraba un error "Null check operator used on a null value" y se colgaba.
   - Solución: Se corrigió la lógica de filtrado y fallback en transactions_screen.dart para que, si no hay cliente válido, se use un objeto Client vacío en vez de null, evitando el error y asegurando que la pantalla nunca se cuelgue por falta de datos.

12. Error: Al registrar un cliente con nombre compuesto solo de emojis, la app se colgaba o mostraba errores de renderizado en el modal de detalles.
Solución: Se implementó un sanitizador y manejo seguro de strings usando graphemes para evitar que nombres con solo emojis causen errores en la UI. Ahora los nombres se procesan correctamente y la app no se cuelga.

Fecha: 2025-09-11

18. Error: Campo "Monto" (TransactionForm) auto-agregaba ",00" al escribir el primer dígito (por ejemplo, al teclear "1" quedaba "1,00") y bloqueaba seguir escribiendo o borrar.
   - Causa: El TextInputFormatter forzaba el formato completo con decimales durante la escritura y reposicionaba el cursor al final.
   - Solución: Se reescribió el formateador para que solo agrupe miles en tiempo real y permita decimales opcionales, sin agregar ",00" al escribir. La completitud de decimales (agregar ",00", pad a 2 o recortar a 2) ocurre solo al perder el foco (FocusNode listener).
   - Archivos: lib/widgets/transaction_form.dart
   - Resultado: La escritura es natural (1 → "1", 1000 → "1.000", 1.000,5 → "1.000,5" → "1.000,50"), se puede borrar sin trabas, y al perder foco se normaliza a dos decimales.

19. Error de compilación: Clase ThousandsFormatter declarada dentro de otra clase y falta de import para NumberFormat.
   - Síntomas: "Classes can't be declared inside other classes", "Undefined class 'NumberFormat'".
   - Solución: Mover ThousandsFormatter y las utilidades de formato a nivel superior del archivo; agregar import correcto `package:intl/intl.dart` y declarar `NumberFormat` global. Se ajustó también el orden de inputFormatters (primero filtro `[0-9.,]`, luego el formateador) para evitar conflictos.
   - Archivos: lib/widgets/transaction_form.dart
   - Resultado: Compilación sin errores y formateo estable.

20. Mejora: Normalización robusta del monto al guardar.
   - Cambio: Antes de parsear se normaliza el texto del monto: `1.234,56` → `1234.56` usando `replaceAll('.', '')` y `replaceAll(',', '.')`.
   - Archivos: lib/widgets/transaction_form.dart (método _save)
   - Resultado: Se evita parseo inválido y el monto se guarda correctamente como double, respetando el formato de entrada en español.

21. Mejora: UX de decimales en blur para el campo "Monto".
   - Cambio: Si no hay decimales, se agrega ",00" al perder foco; si hay 1 decimal, se completa a 2; si hay más de 2, se recorta a 2. Durante la escritura no se fuerza este comportamiento.
   - Archivos: lib/widgets/transaction_form.dart (listener de FocusNode)
   - Resultado: Consistencia visual sin obstaculizar la escritura.

