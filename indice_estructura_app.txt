Para abrir desde navegador web
flutter run -d web-server --web-port=8080

Ejecutar App termporal
flutter clean
flutter pub get
flutter run

Guardar cambio a mi movil directamente
flutter build apk --release
flutter install


# Índice de Páginas, Widgets, Botones y Lógica de la App Deuda-Flow-Flutter

## Estructura General

- **main_scaffold.dart**: Scaffold principal, gestiona navegación y AppBar animado.
- **app_navigation_bar.dart**: Barra de navegación para web/escritorio.
- **custom_animated_app_bar.dart**: AppBar animado y profesional.
- **widgets/**: Componentes reutilizables (formularios, cards, modals, etc). Eliminados: `gradient_app_bar.dart`, `navigation_bar.dart` (no usados). Limpieza de imports y clases privadas innecesarias en widgets y screens.
- **screens/**: Páginas principales de la app.

---

## Páginas (screens/)

### 1. DashboardScreen
- **Ruta:** dashboard_screen.dart
- **Lógica:** Carga clientes y transacciones al iniciar.
- **Botones/Controles:**
  - Estadísticas (DashboardStats)
  - Navegación a otras pantallas

### 2. ClientsScreen
- **Ruta:** clients_screen.dart
- **Lógica:**
  - Carga y muestra lista de clientes.
  - Permite agregar, editar y eliminar clientes.
  - Cards de clientes ocupan el ancho máximo en móvil.
  - Mejora visual: cards sin sombra, fondo personalizado, bloques adaptativos.
  - Acciones centradas y botones flotantes centrados.
  - Formulario de transacción móvil con fondo transparente y botón cerrar flotante.
- **Botones/Controles:**
  - Buscador animado con AnimatedContainer, borde animado, sombra y transición de color.
  - Botón "Agregar Cliente" (abre ClientForm)
  - Botón de editar/eliminar/ver recibo en cada ClientCard
  - Botón para agregar transacción a cliente

### 3. TransactionsScreen
- **Ruta:** transactions_screen.dart
- **Lógica:**
  - Carga y muestra transacciones.
  - Filtrado por cliente, tipo y rango de fechas.
  - Filtros "Cliente" y "Tipo" con botones más altos y padding visual.
  - Buscador animado y visualmente destacado.
  - Calendario de rango de fechas pequeño (no pantalla completa) en modal.
  - Cards de transacciones ocupan el ancho máximo en móvil.
  - Mejora visual: cards con sombra suave, bloques adaptativos, separación y padding.
  - Feedback visual y mensajes claros.
  - Formateo de montos ahora muestra el símbolo "$" solo si la moneda es USD y realiza la conversión según el rate.
  - El cambio de moneda (toggle USD/VES) actualiza el símbolo y la conversión en tiempo real.
  - Corrección de bug: el símbolo "$" ya no aparece en VES y los valores se convierten correctamente.
  - Lógica de filtrado, búsqueda y stats mejorada.
  - Cierre automático y feedback visual al eliminar transacción.
  - Filtros visuales y calendario pequeño para rango de fechas.
  - Refactor local del formateo de montos para independencia visual.
- **Botones/Controles:**
  - Botón para agregar transacción (abre TransactionForm)
  - Botón para eliminar transacción
  - Filtros visuales y calendario pequeño para rango de fechas

### 4. LoginScreen / RegisterScreen / ForgotPasswordScreen / ResetPasswordScreen
- **Ruta:** login_screen.dart, register_screen.dart, forgot_password_screen.dart, reset_password_screen.dart
- **Lógica:**
  - Autenticación de usuario (login, registro, recuperación de contraseña)
- **Botones/Controles:**
  - Botón de login
  - Botón de registro
  - Botón de recuperar contraseña

### 5. ReceiptScreen
- **Ruta:** receipt_screen.dart
- **Lógica:**
  - Muestra recibos individuales
  - Exportar recibo a PDF
- **Botones/Controles:**
  - Botón de exportar PDF
  - Botón de cerrar modal

### 6. WelcomeScreen / NotFoundScreen
- **Ruta:** welcome_screen.dart, not_found_screen.dart
- **Lógica:**
  - Pantalla de bienvenida y pantalla de error 404
- **Botones/Controles:**
  - Botón para navegar a login o dashboard

---

## Widgets Relevantes (widgets/)

- **CustomAnimatedAppBar**: AppBar animado con menú hamburguesa.
- **AppNavigationBar**: Barra lateral para navegación en web.
- **ClientForm**: Formulario para agregar/editar cliente.
- **ClientCard**: Tarjeta de cliente con acciones (editar, eliminar, ver recibo, agregar transacción, ver movimientos), bloques adaptativos y acciones centradas.
- **TransactionForm**: Formulario para agregar/editar transacción, fondo transparente en móvil, botón cerrar flotante.
- **DashboardStats**: Estadísticas del dashboard.
- **ReceiptModal / GeneralReceiptModal**: Modales para mostrar recibos. El modal de recibo general ahora es scrollable, con botones de acción y fechas fuera del área scrollable, centrados y con mejor disposición visual.
- **ToastHelper**: Mensajes toast para feedback.
- **CalendarDateRangePicker**: Calendario pequeño para seleccionar rango de fechas en transacciones.

---

## Botones y Acciones Principales

- **Botón Menú (AppBar):** Abre el drawer o menú lateral.
- **Botón Agregar Cliente:** Abre formulario de cliente.
- **Botón Editar/Eliminar Cliente:** Acciones sobre cada cliente.
- **Botón Ver Recibo:** Abre modal de recibo.
- **Botón Agregar Transacción:** Abre formulario de transacción.
- **Botón Exportar PDF:** Exporta recibo a PDF.
- **Botón Login/Registro/Recuperar Contraseña:** Acciones de autenticación.
- **Botón Navegación:** Cambia de pantalla/tab.
- **Buscador animado:** En clientes y transacciones, con transición visual.
- **Filtros visuales:** Cliente, tipo y rango de fechas con botones grandes y calendario pequeño.

---

## Lógica de Navegación

- **Provider (TabProvider):** Controla el tab/página actual.
- **Navigator:** Para rutas como login, registro, dashboard, etc.
- **Scaffold:** Estructura principal con AppBar, body y bottomNavigationBar.

---

## Observaciones
- Cada pantalla principal es un StatefulWidget o StatelessWidget.
- Los formularios usan validación y feedback visual.
- Los modales se usan para recibos y formularios.
- La lógica de negocio está en Providers y Services.
- Cards y bloques principales se adaptan a móvil y escritorio.
- Mejoras visuales y de usabilidad implementadas en filtros, formularios y listados.
- Calendario de rango de fechas compacto y moderno.

---

_Este índice es un resumen estructurado y actualizado de la app, útil para documentación, onboarding o refactorización._
---

## Permisos necesarios (Android)

- <uses-permission android:name="android.permission.INTERNET"/>
  - Requerido para conexión a Supabase y servicios web.
- <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
  - Para leer archivos (por ejemplo, exportar o visualizar PDFs).
- <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28"/>
  - Para guardar archivos en dispositivos con Android 10 o menor.

Estos permisos están declarados en `android/app/src/main/AndroidManifest.xml` y son necesarios para el funcionamiento correcto de la app.

---

## Novedades sobre Sincronización Visual y Mejoras Offline-First

- La tarjeta de cliente (ClientCard) ahora muestra el estado de sincronización:
  - "Pendiente por sincronizar" (ícono naranja) si el cliente está offline o esperando sincronización.
  - "Sincronizado" (ícono verde) si el cliente ya está sincronizado con Supabase.
  - "Pendiente de eliminar" (ícono rojo) si el cliente está marcado para eliminar.
- El mensaje de sincronización se muestra correctamente tanto en modo offline como online, y se actualiza en tiempo real tras la sincronización.
- Se mejoró la lógica offline-first para clientes y transacciones, incluyendo migración automática de campos en Hive para registros antiguos.
- Feedback visual inmediato en la UI tras crear, editar o eliminar clientes y transacciones, incluso sin conexión.
- El flujo de sincronización en segundo plano (2 segundos) funciona correctamente y actualiza el estado visual.

---

# Índice de Formularios, Botones y Flujo de Datos (Offline-First)

## 1. Clientes (Tabla: clients / Hive: ClientHive)

### Formularios y Botones:
- **Botón "Agregar Cliente"** (ClientsScreen):
  - Abre ClientForm (modal/dialog).
  - Al guardar: crea cliente en Hive (ClientHive, `synced: false`), cierra modal, recarga lista, inicia sync en 2s.
- **Botón "Editar Cliente"** (en cada ClientCard):
  - Abre ClientForm con datos iniciales.
  - Al guardar: actualiza en Hive (`synced: false`), cierra modal, recarga lista, inicia sync en 2s.
- **Botón "Eliminar Cliente"** (en cada ClientCard):
  - Abre confirmación.
  - Al confirmar: marca `pendingDelete: true` en Hive, recarga lista, inicia sync en 2s.

### Relación con Botones:
- Todos los botones de crear, editar y eliminar cliente operan primero en Hive y luego sincronizan a Supabase en background.
- El estado visual de sincronización se muestra en ClientCard.

---

## 2. Transacciones (Tabla: transactions / Hive: TransactionHive)

### Formularios y Botones:
- **Botón "Agregar Transacción"** (en cada ClientCard y en TransactionsScreen):
  - Abre TransactionForm (modal/dialog).
  - Al guardar: crea transacción en Hive (`synced: false`), cierra modal, recarga lista, inicia sync en 2s.
- **Botón "Editar Transacción"** (en cada TransactionCard):
  - Abre TransactionForm con datos iniciales.
  - Al guardar: actualiza en Hive (`synced: false`), cierra modal, recarga lista, inicia sync en 2s.
- **Botón "Eliminar Transacción"** (en cada TransactionCard):
  - Abre confirmación.
  - Al confirmar: marca `pendingDelete: true` en Hive, recarga lista, inicia sync en 2s.

### Relación con Botones:
- Todos los botones de crear, editar y eliminar transacción operan primero en Hive y luego sincronizan a Supabase en background.
- El estado visual de sincronización se muestra en TransactionCard (si está implementado).

---

## 3. Usuarios (Tabla: users)
- **Botón "Registrar"** (RegisterScreen):
  - Crea usuario en Supabase (no offline-first, requiere conexión).
- **Botón "Login"** (LoginScreen):
  - Autenticación en Supabase (no offline-first).

---

# Esquema de Tablas y Relación con Botones

## Tabla: clients (ClientHive)
- **Campos:** id, name, email, phone, balance, synced, pendingDelete
- **Botones/Formularios Relacionados:**
  - Agregar Cliente (ClientForm)
  - Editar Cliente (ClientForm)
  - Eliminar Cliente (ClientCard)

## Tabla: transactions (TransactionHive)
- **Campos:** id, clientId, type, amount, date, description, synced, pendingDelete
- **Botones/Formularios Relacionados:**
  - Agregar Transacción (TransactionForm)
  - Editar Transacción (TransactionForm)
  - Eliminar Transacción (TransactionCard)

## Tabla: users
- **Campos:** id, email, password, ...
- **Botones/Formularios Relacionados:**
  - Registrar (RegisterScreen)
  - Login (LoginScreen)

---

# Resumen de Cumplimiento Offline-First
- **Clientes y Transacciones:** Todo el flujo de creación, edición y eliminación es offline-first (Hive primero, sync a Supabase en background, feedback inmediato en UI).
- **Usuarios:** Registro y login requieren conexión (no offline-first).
- **Visualización:** El estado de sincronización se muestra en las tarjetas (ClientCard y, si aplica, TransactionCard).

---
---
## Lógica y sincronización offline/online (Actualización 12/07/2025)

- TransactionProvider y ClientProvider ahora almacenan y utilizan el userId más reciente para garantizar la sincronización automática y manual de transacciones y clientes, incluso tras reinstalación o limpieza de datos.
- Al recuperar conexión, las transacciones pendientes se sincronizan automáticamente y se recarga el listado desde Supabase, actualizando el estado local y eliminando el estado "pendiente por sincronizar" si ya existen en el backend.
- El balance de los clientes se recalcula automáticamente tras cualquier cambio en transacciones.
- Se reforzó la migración automática de campos en Hive y la robustez ante datos corruptos.
- El polling y la lógica de feedback visual en la UI se mejoraron para todos los flujos offline/online.

---
Actualización 14/07/2025:

- Se refactorizó y mejoró la experiencia visual de los modales de transacción, listas, dropdowns y mensajes de sincronización.
- El FAB ahora se oculta automáticamente al abrir el teclado en formularios.
- El banner de sincronización tiene ancho dinámico y LED parpadeante para todos los estados.
- Las tarjetas de estadísticas del dashboard pueden ajustarse individualmente en tamaño y posición, con comentarios en el código para facilitar cambios futuros.
- El modal de recibo general filtra correctamente por fecha y muestra mensajes claros si no hay movimientos en el rango.
- El PDF de recibo general muestra totales por cliente y globales, y soporta conversión de moneda (USD/VES) según el toggle y la tasa.
- La lógica de conversión de moneda está integrada en el modal y el PDF, usando CurrencyProvider y CurrencyUtils.
- El símbolo "$" se muestra correctamente en el PDF y en el modal solo cuando la moneda es USD.
- Limpieza de variables no usadas y warnings menores.
- Mejoras menores de UI y feedback visual en listados y modales.
